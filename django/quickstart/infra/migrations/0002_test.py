# Generated by Django 3.2.12 on 2022-03-18 16:23

import os

from django.conf import settings
from django.db import migrations

from infra.models import SecurityGroup, SecurityGroupRule


def insert_quickstart(apps, _schema_editor):
    env_var = os.environ

    # TODO replace with your desired project name
    PROJECT_NAME = settings.PROJECT_NAME

    # AWS ELASTIC CONTAINER REPOSITORY (ECR)
    region = f"-{env_var['AWS_REGION']}" if env_var['AWS_REGION'] is not None else ""
    REPOSITORY = f"{PROJECT_NAME}-repository{region}"

    # AWS FARGATE + ELASTIC CONTAINER SERVICE (ECS)
    # https:#docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html
    TASK_DEF_RESOURCES = "2vCPU-8GB"  # task_definition_cpu_memory enum
    TASK_DEF_FAMILY = f"{PROJECT_NAME}-td"
    SERVICE_DESIRED_COUNT = 1
    IMAGE_TAG = "latest"
    CONTAINER = f"{PROJECT_NAME}-container"
    CONTAINER_MEM_RESERVATION = 8192  # in MiB
    PROTOCOL = "TCP"
    CLUSTER = f"{PROJECT_NAME}-cluster"
    SERVICE = f"{PROJECT_NAME}-service"

    # AWS SECURITY GROUP + VPC
    SECURITY_GROUP = f"{PROJECT_NAME}-security-group"
    PORT = 8088

    # AWS ELASTIC LOAD BALANCER
    TARGET_GROUP = f"{PROJECT_NAME}-target"
    LOAD_BALANCER = f"{PROJECT_NAME}-load-balancer"

    # Security groups
    SecurityGroupModel = apps.get_model('infra', 'SecurityGroup')
    SecurityGroupRuleModel = apps.get_model('infra', 'SecurityGroupRule')
    sg = SecurityGroup.objects.using('infra').create(group_name=PROJECT_NAME, description=f"{PROJECT_NAME} security group")
    print(sg.id)
    # rule1: SecurityGroupRule = SecurityGroupRuleModel(is_egress=False, ip_protocol="tcp", from_port=PORT, to_port=PORT,
    #                                                   cidr_ipv4="0.0.0.0/0", description=SECURITY_GROUP)
    # rule1.security_group = sg
    #rule1.save(using='infra')
    rule1 = SecurityGroupRule.objects.using('infra').create(is_egress=False, ip_protocol="tcp", from_port=PORT, to_port=PORT,
                                                cidr_ipv4="0.0.0.0/0", description=SECURITY_GROUP, security_group=sg)
    print(rule1.id)
    print(rule1.security_group.id)

    #rule2: SecurityGroupRule = SecurityGroupRuleModel(is_egress=True, ip_protocol="-1", from_port=-1, to_port=-1,
     #                                                 cidr_ipv4="0.0.0.0/0",
      #                                                description=SECURITY_GROUP)
    #rule2.save(using='infra')


class Migration(migrations.Migration):
    dependencies = [
        ('infra', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(insert_quickstart)
    ]
